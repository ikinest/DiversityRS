# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd
import random
import math
from sklearn.cluster import KMeans
import time



def DisimlarityMatrixReclist(sim,reclist):
    leng = len(reclist)
    
    simreclist = np.zeros((leng, leng))
    for i in range(0,leng):
        for j in range(i,leng):
            if reclist[i]==reclist[j]:
                simreclist[i][j]=0.0
            else:
                simreclist[i][j]=sim[reclist[i]][reclist[j]]
                simreclist[j][i]=sim[reclist[i]][reclist[j]]
    return simreclist

def simlaryOfReclist(matrix):
    size = len(matrix)
    if size<=1:
        return 0
    else:
        return np.sum(matrix)/size/(size-1)
#new add

def CandinateItemSimilaryWithOthersInR(sim,candinateItem,R):
    simDF = pd.DataFrame(sim)
    similarysum = np.sum(simDF.loc[candinateItem][R])- 1.0
    return similarysum/len(R)

def overallSimilaryWithoutCandinateItem(sim,candinateItem):
    return np.sum(pd.DataFrame(sim).loc[candinateItem]) - 1.0

#end new add

def label_item_map(label):
    clusters = list(set(label))
    cnt = 0
    label_item ={}
    item_label ={}
    for cluster in clusters:
        label_item[cluster]=[]
        
    for i in label:
        label_item.get(i).append(cnt)
        item_label[cnt]=i
        cnt +=1
    return label_item,item_label

def find_init_label(item_label,initidxs):
    initlabel=[]
    for item in initidxs:
        initlabel.append(item_label.get(item))
    return initlabel
  


def countInitlalbe(initlabel):
    initlabeNum = {}
    label = set(initlabel)
    count = 0
    for lab in label:
        for l in range(0,len(initlabel)):
            if lab == initlabel[l]:
                count +=1
        initlabeNum[lab]=count
        count = 0
    return initlabeNum
            

def countNumPerCluster(label_item):
    numPerCluster = {}
    for k in label_item.keys():
        numPerCluster[k] = len(label_item.get(k))-1
    return numPerCluster
   
def findMin(weightdict):
    minValueKey=[]
    minValue = sorted(list(set(weightdict.values())))[0]
    for k in weightdict.keys():
        if weightdict.get(k)==minValue:
            minValueKey.append(k)
        else:
            pass
    return minValueKey
    
def weightRejust1(InitlabelCount,threshod,numPerCluster):
    weight = InitlabelCount.copy()
    diffkeys = list(set(numPerCluster.keys()).difference(set(weight.keys())))
    for diff in diffkeys:
        weight[diff]=0
    for k in weight.keys():             
        while (weight.get(k)>threshod and len(findMin(weight))>0):
            minValueId = findMin(weight) 
            idx = random.choice(minValueId)
            if(numPerCluster.get(idx)>weight.get(idx)):
                weight[idx] = weight.get(idx) + 1
            else:
                minValueId.pop(minValueId.index(idx))
                if len(minValueId)>0:
                    idx1 = random.choice(minValueId)
                    weight[idx1] = weight.get(idx1) + 1
            weight[k] = weight.get(k) - 1
        print ("this label have been rejusted.")
    return weight

def weightRejust(InitlabelCount,threshod,numPerCluster):
    zerokey=[]
    weight = InitlabelCount.copy()
    diffkeys = list(set(numPerCluster.keys()).difference(set(weight.keys())))
    for diff in diffkeys:
        weight[diff]=0
        
         
    for k in weight.keys():             
        while( weight.get(k)>threshod and len(findMin(weight))>0):
            minValueId = findMin(weight) 
            idx = random.choice(minValueId)
            if(numPerCluster.get(idx)>weight.get(idx)):
                weight[idx] = weight.get(idx) + 1
            else:
                minValueId.pop(minValueId.index(idx))
                if len(minValueId)>0:
                    idx1 = random.choice(minValueId)
                    weight[idx1] = weight.get(idx1) + 1
            weight[k] = weight.get(k) - 1
    for ke in weight.keys():
        if weight.get(ke)==0:
            zerokey.append(ke)
    for zeroke in zerokey:
        weight.pop(zeroke)
    return weight

    
def WI(ri,zi):
    return math.exp(-(ri-zi)/ri)


def MaxsumDivIintMaxScore(weight,label_item,topk,aUserRatings):
    result = []
    ri = weight.copy()
    wi = {}
    zi = {}
    MaxConstraint = -999999999
    tempitem = -1
    templabel = -1
    initdict = [0,0]
    for k in ri.keys():
        wi[k]=0
        zi[k]=0 
        initscore = dict(aUserRatings[list(label_item.get(k))].sort_values(ascending=False).head(n=1)).values()[0]
        if(initscore > initdict[1]):
            initdict[0]=k
            initdict[1]=initscore
    InitResult = dict(aUserRatings[list(label_item.get(initdict[0]))].sort_values(ascending=False).head(n=1)).keys()[0]
    result.append(InitResult)
    initlabel = item_label.get(InitResult)
    zi[initlabel]= zi.get(initlabel)+1
    wi[initlabel]= WI( ri.get(initlabel) ,zi.get(initlabel) )     
    result_label = []
    counter = 1

  
    while(counter<topk):     

        for k in ri.keys():
                while (zi.get(k) < ri.get(k)):
                    dict_k = dict(aUserRatings[list(set(label_item.get(k)).difference(set(result)))].sort_values(ascending=False))
                    #print(dict_k)
                    temp = result
                    delete = None
                    
                    for dictkey in dict_k.keys():
                        #print("dict",dictkey)
                        temp.append(dictkey)
                        delete = dictkey                
                        disreclist = CandinateItemSimilaryWithOthersInR(sim,dictkey,temp) 
                        tempConstraint = (1-wi.get(k)*disreclist) * dict_k.get(dictkey)
                        if tempConstraint > MaxConstraint:
                            MaxConstraint = tempConstraint
                            tempitem = dictkey
                            templabel = k
                        temp.remove(delete)
                    result.append(tempitem)                
                    result_label.append(templabel)
                    zi[templabel]= zi.get(templabel)+1
                    wi[templabel]= WI( ri.get(templabel) ,zi.get(templabel) )
                    counter += 1
                    MaxConstraint = -999999999
            
    return result,result_label 

def cluDivRec(weight,item_label,topN,aUserRatings):
    result = []
    #tempweight = weight
    itemratings = aUserRatings.sort_values(ascending=False)
    #print "itemratings",itemratings
    while(len(result)<topN):
        for item in itemratings.index:
            if weight.get(item_label.get(item))>0:
                result.append(item)
                weight[item_label.get(item)]=weight.get(item_label.get(item))-1          
    
    return result

def cluDivRecOld(weight,label_item,aUserRatings):
    result = []
    for k in weight.keys():
        if weight.get(k)>0:
            dict_k = dict(aUserRatings[label_item.get(k)].sort_values(ascending=False).head(n=weight.get(k)))
            for dictkey in dict_k:
                result.append(dictkey)
        else:
            pass
    
    return result   
def getPositivelinks(ratings):          
    user_positive_items ={}    
    for user in range(0,n_users):
        user_positive_items[user]=[]        
        filterUser = ratings[ratings.user_id==user+1] 
        positive = np.mean(filterUser)[2]           
        for line in filterUser.itertuples():
            if line[3] >= positive:
                user_positive_items.get(user).append(int(line[2])-1)    
    return user_positive_items


def genWeightMatrix(user_positive_items):
    positive_matrix = np.zeros((n_items, n_items))
    for user in user_positive_items.keys():
        items = user_positive_items.get(user)        
        for item in items:
            idx = items.index(item)
            for it in items[idx+1:]:
                positive_matrix[item][it]=positive_matrix[item][it]+1
                positive_matrix[it][item]=positive_matrix[it][item]+1
    return positive_matrix
   

def extractSubgraph(weightMatrix,theUserPositiveItems):
    subGraph = pd.DataFrame(weightMatrix).filter(theUserPositiveItems,axis=0)
          
    return subGraph

def getSubGraphEdges(subGraph,theUserPositiveItems):        
    
    subGraphEdges = []    
    for row in theUserPositiveItems:
        location = dict(subGraph.loc[row])         
        items = [k for k,v in location.items() if v>0]# filter subMatrix =0        
        for col in items:           
            subGraphEdges.append([row,col])
            if col in theUserPositiveItems:
                pos = theUserPositiveItems.index(col)
                subGraph.iloc[pos,row] = 0
            else:
                pass
    return subGraphEdges

def countCo_ratedOrder(edges):
    occurenceValue = {}        
    for item in range(0,n_items):
        cnt = 0
        for i in range(0,len(edges)):
            if (edges[i][1]==item):
                cnt +=1
        occurenceValue[item]=cnt
    return occurenceValue

def itemHaveEdges(WeightMatrix): 
     itemEdges ={}
     matrixdf = pd.DataFrame(WeightMatrix)
     for item in range(0,n_items):
        num = len([k for k,v in dict(matrixdf.loc[item]).items() if v>0])
        itemEdges[item]=num
     return itemEdges
 
def caculateEntropy(WeightMatrix,itemEdges):
    entropy = {}
    matrixdf = pd.DataFrame(WeightMatrix)
    for item in range(0,n_items):
        hasEdgesItem = [k for k,v in dict(matrixdf.loc[item]).items() if v>0]
        tempentropy =0
        for j in hasEdgesItem:
            normalized = float(matrixdf[item][j])/ itemEdges.get(j)
            tempentropy -= normalized * np.log2(normalized)
        entropy[item] = tempentropy
    return entropy

def recommendation(aUserRatings,entropy,weight,topn,label_item):
    #print "weight",weight
    ratedict = dict(aUserRatings)
    result=[]
    temp ={}
    reldiv = {}
    for item in ratedict.keys():
        reldiv[item]=entropy.get(item)*ratedict.get(item)
        #print reldiv.get(item)
    for label in weight.keys():
        take= weight.get(label)
        #print "take",take
        for item in label_item.get(label):
            temp[item]=reldiv.get(item)
        top = sorted(temp.items(), lambda x, y: cmp(x[1], y[1]), reverse=True)[:take]
        #print "top=",top
        #print weight
        temp={}   
        for i in top:
            result.append(i[0])         
    return result 

def paraCreate(topn,user):

    #for alg in preAlg.keys():
    #preAlg={'SVD':'MovieLensSVD.txt','IBCF':'MovieLensIBCF.txt','UBCF':'MovieLensUBCF.txt','ALS':'MovieLensALS.txt'}
    path = "D:\\recommendation\\new\\BooksALS.txt" 
    
    preScoredf = pd.read_csv(path, sep=',', names=header,index_col=False)
    als_prediction =preScoredf.as_matrix() #all_data_matrix

 
        #topn = int(topN)
    #timefile = open("D:\\[Time]CluDivonBooksThreshold3[BasedonALS]Top["+str(topn)+"].txt",'a')
    #resultfile = open("D:\\CluDivonBooksThreshold3[BasedonALS]Top["+str(topn)+"].txt",'a')
    #ENtimefile = open("D:\\[time]entropyDiversityBOOKS["+str(topn)+"].txt",'a')
    #ENrecofile = open("D:\\entropyDiversityBOOKSTop["+str(topn)+"].txt",'a')        
    

    t1 = time.time()
    aUserRatings = pd.DataFrame(als_prediction).loc[user]
    init = aUserRatings.sort_values(ascending=False).head(n=topn)
    initidxs = dict(init).keys()

    initlabel = find_init_label(item_label,initidxs)

    InitlabelCount = countInitlalbe(initlabel) 
    
    #ALSuser20tims =[]
    #result =[]
    for threshod in threshods:  
        #timefile = open("D:\\booktop20threshold20-1\\[Time]CluDivonBooksThreshold["+str(threshod)+"][BasedonALS]Top20.txt",'a')
        #resultfile = open("D:\\booktop20threshold20-1\\CluDivonBooksThreshold["+str(threshod)+"]BasedonALS]Top20.txt",'a')
        ENtimefile = open("D:\\booktop20threshold20-1\\[time]entropyDiversityBOOKS["+str(threshod)+"].txt",'a')
        ENrecofile = open("D:\\booktop20threshold20-1\\entropyDiversityBOOKSTop["+str(threshod)+"].txt",'a')        
        weight = weightRejust(InitlabelCount,threshod,numPerCluster)  
        #print weight          
        ENt1 = time.time()
        ENresult = recommendation(aUserRatings,shanno_entropy,weight,topn,label_item)
        ENt2 = time.time()
        ENtimefile.write(str(ENt2-ENt1))
        ENtimefile.write("\n")
        ENrecofile.write(str(ENresult)+",")
        ENrecofile.write("\n")
        ENtimefile.close()
        ENrecofile.close()          
        #LGDivItem = cluDivRec(weight,item_label,topn,aUserRatings)
        #resultfile.write(str(LGDivItem)+","+"\n")
        #t2 = time.time()     
        #timefile.write(str(t2-t1)+","+"\n")    
    
    #timefile.close()
    #resultfile.close()



header1 = ['user_id', 'item_id', 'rating']

df = pd.read_csv('D://recommendation//new//bookdatasetUniformNo.txt', sep='::', names=header1,index_col=False)
n_users = df.user_id.unique().shape[0]
n_items = df.item_id.unique().shape[0]
print ('Number of users = ' + str(n_users) + ' | Number of movies = ' + str(n_items)) 

from sklearn import cross_validation as cv
dataset,_ = cv.train_test_split(df, test_size=0)
originalMatrix = np.zeros((n_users, n_items))
for line in dataset.itertuples():
    originalMatrix[int(line[1])-1, int(line[2])-1] = line[3]  

from sklearn.metrics.pairwise import pairwise_distances
cosine_distance = pairwise_distances(originalMatrix.T, metric='cosine')


sim = 1-cosine_distance




#based on similarity
label = np.array(
    [
        19,8,19,17,10,19,13,13,19,19,3,14,19,19,19,5,19,19,15,19,19,18,19,6,15,18,6,18,9,19,16,19,19,10,19,2,19,19,2,19,19,11,7,10,11,2,19,13,11,19,11,10,10,19,19,15,19,19,6,10,6,18,8,17,16,7,7,19,19,19,9,19,18,19,17,19,19,19,6,19,19,0,19,19,17,19,17,19,18,19,16,19,8,12,16,19,19,19,14,19,6,16,6,12,19,18,19,18,18,19,10,19,16,19,19,2,19,10,19,15,8,5,19,18,6,19,19,19,16,19,19,17,1,16,19,16,19,7,11,8,16,18,13,0,18,19,19,19,19,14,19,18,7,19,16,10,5,19,19,12,18,8,16,19,19,15,10,19,7,14,15,15,19,17,1,1,19,9,19,12,19,19,16,7,18,1,7,10,19,19,19,18,17,19,19,16,16,19,19,7,9,6,16,10,19,19,5,19,10,19,19,19,19,11,10,19,17,19,16,16,17,18,13,9,19,19,11,19,17,19,13,19,16,14,4,11,19,15,19,19,19,18,18,5,16,0,19,18,19,19,11,10,17,10,17,14,19,16,19,18,17,19,15,19,13,7,16,18,6,19,15,6,16,19,13,2,19,15,19,10,10,19,19,19,19,19,19,19,19,19,19,13,19,7,19,14,2,19,19,7,3,4,16,19,19,6,19,19,19,18,19,18,19,19,15,19,19,19,19,17,19,19,17,18,15,6,10,19,6,16,19,14,19,17,19,19,19,15,5,18,19,16,19,19,19,9,10,18,6,15,18,16,19,11,7,19,17,8,19,9,8,19,10,19,19,16,19,19,19,19,19,16,18,18,16,16,19,19,19,10,19,6,13,9,16,17,10,19,1,18,16,10,15,19,16,19,19,7,19,5,19,19,10,18,19,1,17,19,19,19,16,19,19,19,19,0,16,19,2,9,17,10,19,10,19,19,19,10,11,6,19,10,19,18,19,7,16,5,15,19,16,16,17,9,5,10,18,19,16,14,16,10,15,19,19,19,1,11,19,16,19,17,19,19,19,18,8,19,17,19,16,19,19,19,16,19,19,18,18,19,8,10,19,14,19,19,19,18,18,19,19,13,17,19,19,3,19,16,19,19,16,19,19,4,15,8,16,16,16,19,19,19,16,19,19,17,19,19,15,15,16,0,15,19,18,19,16,19,19,18,19,19,0,6,18,19,13,19,19,19,10,12,19,19,19,2,8,19,8,11,2,7,19,19,9,10,19,7,14,19,6,19,19,19,8,5,18,19,9,8,19,16,7,19,19,11,19,16,19,2,19,5,10,19,19,19,13,17,5,18,19,10,5,19,17,10,2,19,15,10,19,10,6,19,19,10,6,19,19,19,1,8,17,19,19,19,19,19,4,17,19,9,15,19,19,10,19,19,16,19,19,6,14,19,8,19,19,19,19,18,19,10,19,16,19,13,19,10,18,3,7,19,19,18,8,19,19,16,15,19,19,19,16,16,19,19,16,16,15,10,19,19,19,16,19,19,19,19,19,19,16,19,18,16,19,16,10,19,15,17,5,5,19,15,19,19,16,16,8,19,19,18,1,16,18,14,7,19,19,19,19,6,8,19,19,17,18,19,16,2,19,18,19,19,16,1,11,16,19,19,15,19,19,19,16,15,19,8,19,19,19,10,19,19,16,19,14,10,2,19,15,19,8,10,17,19,19,19,3,19,19,10,1,16,19,2,19,19,11,19,6,19,19,4,19,19,19,13,19,14,19,4,18,19,19,19,18,6,17,2,14,7,15,10,19,15,19,11,10,19,16,19,5,19,19,19,18,19,16,19,1,2,16,19,18,19,10,1,16,19,10,19,19,10,19,19,18,5,10,17,19,16,16,19,19,18,19,19,19,19,19,19,10,19,14,19,19,18,19,19,6,17,1,10,7,19,10,19,19,16,18,17,10,19,16,19,18,18,19,19,10,19,7,19,0,16,19,16,9,19,19,19,3,15,18,16,19,19,19,14,16,19,18,19,19,5,19,19,19,8,19,10,19,2,16,16,19,2,19,19,16,19,18,19,16,17,18,19,19,15,8,19,19,19,19,16,6,6,18,17,19,17,16,19,19,18,19,10,17,19,10,5,19,17,19,19,19,17,12,10,19,19,16,16,19,5,19,19,19,19,17,5,19,18,10,15,19,18,10,19,13,16,10,10,19,10,19,16,19,19,9,10,18,19,7,19,0,15,19,4,19,19,9,19,17,15,5,19,19,18,19,19,18,19,6,19,5,19,19,19,19,14,5,16,6,16,19,16,19,18,19,19,11,19,19,16,13,19,19,19,6,17,19,17,19,4,18,18,19,16,18,16,19,8,19,7,19,19,19,19,18,18,19,19,16,19,11,19,10,16,19,17,10,19,19,9,2,19,16,2,11,10,15,19,12,18,19,17,11,6,5,19,1,6,16,19,19,19,19,0,17,19,19,6,10,19,19,19,14,6,19,18,19,18,10,18,19,19,19,10,15,18,17,19,19,18,19,19,5,10,15,19,12,3,19,19,13,16,19,19,19,10,2,17,16,19,19,18,16,16,19,19,19,18,19,19,16,17,16,19,18,19,6,19,19,12,17,19,8,19,19,19,16,1,19,6,19,19,16,19,19,19,8,19,16,7,6,19,16,19,19,5,19,19,19,6,19,0,19,19,19,19,19,10,10,16,19,19,11,16,6,18,19,18,16,7,19,6,3,16,5,18,19,10,18,19,8,19,0,19,17,19,19,10,19,5,16,19,19,19,19,6,18,19,10,5,19,12,18,19,19,17,16,19,18,19,18,19,2,19,16,18,18,10,15,19,19,19,19,12,19,19,6,19,19,19,1,9,19,18,10,19,19,19,5,19,19,15,16,17,19,15,19,9,2,5,12,19,3,19,10,19,0,5,19,18,19,19,19,16,19,15,19,18,19,7,8,19,19,10,19,19,10,19,19,19,19,17,19,19,19,17,7,6,15,18,1,19,18,19,13,16,19,19,10,19,10,19,10,8,18,16,1,19,16,18,8,19,18,3,15,19,19,15,4,19,19,18,18,18,19,10,7,19,19,16,19,8,16,16,19,19,9,10,9,5,6,19,17,10,5,19,19,7,4,12,2,13,7,12,19,3,16,16,5,6,16,19,10,19,19,19,15,19,18,16,19,19,19,17,10,16,19,19,19,19,19,19,19,19,15,16,19,19,19,2,16,19,19,19,17,19,1,19,4,19,19,18,19,19,19,18,18,19,19,17,19,10,16,12,9,15,8,19,1,17,7,10,15,5,15,16,6,19,18,19,5,11,18,19,10,18,19,19,10,19,10,19,19,14,19,10,19,15,19,16,18,9,16,15,19,19,15,19,19,19,19,19,19,19,19,19,1,8,7,19,19,16,18,19,17,18,18,10,18,0,19,16,19,19,5,7,19,8,18,15,16,19,19,19,19,19,18,19,5,18,16,19,19,19,6,19,16,19,3,15,10,19,19,18,19,17,19,5,17,19,12,15,15,16,19,17,19,19,7,19,19,6,17,19,19,19,19,10,19,19,7,19,19,7,19,19,19,16,19,19,19,19,8,2,18,6,19,10,18,19,19,14,16,19,8,16,13,10,16,12,19,19,10,10,10,19,18,19,18,19,15,4,19,19,17,19,5,19,17,19,18,19,17,19,19,4,19,10,0,19,8,19,19,19,18,17,19,17,19,19,19,19,19,8,4,19,19,19,18,16,19,19,16,19,19,19,19,17,16,19,19,19,19,17,10,16,10,15,13,18,2,16,19,19,17,19,19,6,19,19,19,15,6,18,7,19,10,16,15,1,19,11,19,18,4,19,18,19,1,6,19,16,10,7,19,2,17,19,19,7,16,19,10,19,19,11,10,8,19,1,18,2,7,19,19,19,19,19,16,10,16,10,19,18,0,18,19,18,19,7,19,7,5,16,19,17,16,19,19,19,16,19,19,19,15,13,19,2,7,10,19,19,17,19,19,19,19,19,19,19,10,18,10,18,19,19,5,1,19,12,18,19,19,19,19,16,16,16,9,19,17,16,16,19,19,19,19,16,10,14,16,2,19,17,16,16,0,19,6,18,19,19,17,16,12,19,16,19,14,18,5,19,16,19,19,10,18,15,19,9,18,17,19,6,18,16,19,19,16,18,19,2,10,19,19,1,16,18,2,19,19,19,16,19,8,19,19,19,19,18,19,19,19,19,19,12,18,17,8,19,18,6,19,10,11,19,9,10,18,18,18,19,19,1,16,19,19,19,19,19,19,10,19,7,19,19,15,19,19,19,7,19,1,19,8,16,19,19,19,19,19,19,19,17,17,19,19,16,17,19,18,13,19,15,19,19,19,19,19,19,19,19,19,19,3,0,19,19,19,19,19,18,18,19,2,19,16,5,6,19,19,2,10,19,8,19,10,19,16,10,19,19,6,5,17,17,18,10,15,19,7,10,15,19,19,19,19,16,18,10,14,8,19,19,19,5,16,11,8,16,5,5,19,16,19,16,19,19,19,19,19,14,9,19,19,18,18,19,18,19,16,19,19,19,19,19,18,15,0,18,19,19,19,19,19,10,0,17,18,19,18,17,19,19,19,16,19,19,19,18,18,13,19,14,17,18,14,10,14,12,15,7,19,18,18,19,19,14,14,17,11,10,18,17,19,10,19,10,19,19,19,17,19,9,19,13,1,19,16,19,12,18,19,19,14,19,16,8,19,9,15,19,16,19,17,8,19,19,19,5,19,17,19,19,19,19,16,19,17,17,19,19,10,10,16,15,19,5,19,19,18,1,6,15,19,19,16,19,19,19,16,10,7,19,19,0,6,19,18,19,18,19,18,19,7,19,10,19,18,19,2,10,19,16,18,2,19,19,19,19,15,16,19,19,7,17,16,19,19,6,19,18,18,5,7,19,19,19,19,16,6,19,17,17,8,19,16,10,5,15,19,18,10,19,7,19,18,10,9,19,13,19,19,19,10,19,18,5,19,14,10,19,19,19,14,10,19,17,18,19,5,16,13,19,15,12,6,18,18,19,19,19,18,6,15,19,19,18,10,5,6,19,19,18,15,6,18,18,18,15,7,15,19,7,19,1,19,15,19,19,19,19,19,7,19,19,9,19,1,19,16,19,19,19,18,7,19,17,19,16,18,13,18,19,19,18,14,19,19,2,19,1,16,19,19,19,19,19,19,19,7,16,6,16,19,19,19,19,19,19,19,19,16,19,19,19,15,19,1,19,19,6,4,19,15,19,19,19,15,19,15,19,19,3,10,1,19,3,19,19,19,9,19,19,19,3,19,17,14,3,1,10,19,15,16,13,19,19,16,16,18,19,5,10,14,19,19,19,19,10,10,1,19,19,1,19,9,19,4,16,19,19,19,19,15,18,10,4,10,19,10,11,18,16,19,19,10,8,10,10,19,13,18,9,19,18,19,18,19,8,18,17,19,17,1,19,19,11,16,19,1,7,19,7,10,9,3,19,19,19,19,19,19,8,7,19,6,10,19,7,16,10,19,19,19,16,19,19,16,19,19,19,10,19,14,19,17,18,19,16,19,14,14,19,19,19,17,16,19,19,5,16,17,8,8,13,18,10,10,19,5,19,19,19,8,8,19,19,9,19,19,19,19,15,16,11,19,18,16,6,4,19,19,1,19,18,10,19,19,19,19,3,19,10,19,19,19,19,11,10,5,19,19,19,17,19,19,9,19,17,19,19,6,5,5,19,17,9,10,15,16,2,19,17,19,5,16,10,16,19,18,10,16,18,8,10,18,16,12,18,19,19,9,10,19,19,18,19,13,6,18,19,19,18,19,19,19,15,19,16,19,18,10,14,19,19,19,19,2,19,17,5,16,19,19,19,19,16,19,19,10,19,18,10,10,19,19,19,15,14,17,17,19,5,18,4,19,19,10,19,4,19,19,10,19,16,8,16,19,16,18,19,19,0,19,19,19,19,10,8,19,18,19,19,19,19,19,10,16,19,19,6,16,19,19,19,19,7,18,19,19,19,19,7,7,17,19,10,19,19,19,19,19,10,19,19,6,10,15,5,16,19,19,19,15,19,19,2,16,16,19,19,8,6,5,19,19,0,19,7,15,19,2,19,16,19,19,19,19,19,16,19,17,7,7,10,2,19,18,19,5,10,5,7,16,19,16,19,19,19,19,4,5,19,16,6,19,10,6,18,19,18,19,6,16,8,19,19,19,19,19,19,6,19,11,19,1,9,7,19,16,19,6,19,10,19,18,19,19,19,17,19,19,19,16,19,10,4,17,18,10,17,19,19,19,18,19,17,10,16,19,0,10,16,19,16,18,19,10,19,19,10,12,16,19,19,19,19,19,19,10,18,5,0,19,18,16,19,4,17,18,2,19,15,18,7,19,19,15,10,17,19,19,10,18,16,19,18,19,10,19,19,19,18,15,19,19,19,17,17,19,9,19,19,19,19,19,16,18,19,19,19,19,18,5,16,6,19,16,18,19,19,16,6,19,19,19,19,18,7,19,18,8,19,5,16,19,19,19,18,19,16,18,16,18,19,5,19,19,19,18,19,18,15,19,19,19,16,19,19,19,18,19,19,5,16,19,6,16,19,16,16,19,10,4,19,14,19,9,19,8,19,1,16,19,19,18,18,4,10,19,18,9,11,19,19,10,11,6,7,8,2,16,19,18,19,17,15,10,19,19,19,15,19,19,19,19,19,2,12,16,10,16,19,19,12,19,19,16,16,10,7,19,19,11,19,16,19,12,19,18,18,10,19,19,19,19,19,17,19,18,19,19,19,19,19,6,19,1,18,19,17,16,19,19,10,10,19,16,10,6,19,19,8,10,16,19,10,15,19,10,19,18,19,19,2,19,16,19,16,19,19,19,19,19,17,19,15,14,5,5,10,19,19,16,10,19,19,12,19,19,19,15,19,19,14,16,18,19,19,19,0,5,15,13,19,16,19,19,9,19,8,19,18,18,19,19,19,19,18,14,16,18,17,19,19,19,19,18,19,10,10,2,19,19,10,19,10,18,10,19,10,19,19,19,19,6,3,19,19,19,19,17,19,10,19,19,1,5,15,19,18,19,19,16,17,9,10,19,4,15,7,17,16,19,19,10,11,19,19,19,19,19,12,16,8,15,19,19,19,10,19,17,19,19,7,10,11,19,13,18,19,16,19,19,19,19,4,2,19,14,10,19,19,19,0,10,14,19,19,15,19,19,19,19,19,19,15,19,7,16,5,19,10,19,19,15,17,17,19,16,1,19,16,19,17,12,16,19,6,10,18,16,3,8,6,19,19,15,19,19,18,19,19,0,13,19,7,19,18,19,17,16,19,8,19,6,19,18,19,9,6,8,17,19,14,13,15,16,16,10,19,3,19,19,19,19,6,10,16,7,19,10,4,19,19,11,19,19,19,7,19,19,19,6,19,8,10,10,1,19,18,19,19,19,19,19,10,19,8,8,19,8,5,6,19,18,19,18,19,19,16,8,8,13,9,19,19,18,19,19,19,19,18,10,10,19,19,17,17,16,8,19,7,19,19,10,19,1,19,19,19,18,8,16,5,19,3,0,18,19,19,6,19,19,10,18,0,19,15,10,6,19,10,19,19,16,15,19,18,19,15,15,19,19,1,19,5,16,17,19,6,10,19,19,19,19,11,2,5,10,19,18,19,16,19,6,16,11,19,11,17,16,19,18,19,19,19,18,19,19,19,7,19,16,16,19,17,19,10,12,7,10,19,14,19,19,19,19,18,1,6,19,15,8,12,18,19,0,19,19,18,19,10,19,5,2,3,19,10,19,19,15,6,7,19,1,19,10,19,19,6,19,6,14,19,19,19,8,9,16,10,19,16,19,19,5,19,3,19,16,15,8,17,19,10,19,18,10,5,16,19,19,13,16,17,9,19,12,19,19,7,2,19,7,18,19,0,19,19,0,5,19,16,18,19,16,19,19,16,4,19,10,8,8,10,16,16,19,19,16,10,18,16,10,19,7,16,10,19,14,13,19,18,10,6,19,16,18,19,19,19,18,19,14,10,2,19,19,18,19,19,19,18,18,11,9,19,19,19,6,15,8,7,19,19,8,15,19,19,2,19,19,18,17,11,19,4,19,19,19,19,19,16,17,10,19,12,19,10,18,16,1,19,19,17,19,11,19,5,17,6,19,19,2,18,19,19,19,15,10,15,19,16,6,19,18,8,11,19,16,19,19,19,19,2,19,17,19,19,16,19,19,19,16,16,19,19,19,19,16,15,19,19,19,19,10,19,17,19,13,10,19,18,19,8,19,10,19,6,14,19,19,7,5,19,5,10,19,19,11,19,19,9,19,19,19,16,10,19,19,19,5,19,10,7,16,19,19,19,18,16,0,19,11,19,19,19,10,15,19,19,18,19,8,10,18,3,19,17,19,19,19,12,19,16,19,19,16,19,19,4,19,19,19,19,19,19,18,10,18,19,7,19,5,17,18,19,19,19,19,10,19,19,16,10,12,4,15,4,19,3,16,19,9,19,19,12,19,16,18,16,16,16,19,2,17,18,19,19,16,18,17,19,19,10,19,19,19,8,19,2,19,19,18,0,19,3,18,19,19,17,19,7,16,15,19,11,13,17,19,19,15,19,16,2,2,16,19,19,18,19,10,19,16,18,16,7,19,16,19,18,19,6,19,14,17,18,19,18,17,19,19,19,13,19,8,6,19,11,19,6,14,18,19,19,16,18,13,19,15,19,19,16,13,19,14,19,19,18,10,6,14,3,19,7,8,6,7,13,18,19,19,8,14,19,16,6,19,19,10,19,19,16,19,18,18,19,19,19,8,14,19,10,18,18,16,19,19,8,17,5,7,17,19,19,19,18,16,19,16,19,19,18,10,19,7,19,19,12,18,10,19,6,18,16,19,10,19,19,10,8,19,2,18,19,19,19,15,19,19,19,19,19,16,17,19,19,16,12,19,19,17,19,6,3,19,6,19,19,19,10,19,16,19,16,19,18,19,19,19,18,5,12,19,19,19,19,18,19,19,15,16,19,18,19,18,10,14,16,18,5,19,19,16,15,19,13,19,8,10,19,7,15,19,8,18,17,19,19,19,15,18,19,16,19,10,19,19,15,19,5,19,5,14,18,15,10,12,3,6,10,10,19,10,3,6,2,18,19,17,10,19,16,19,19,3,17,19,19,19,18,10,19,4,19,7,19,19,16,16,15,19,19,17,19,7,19,19,15,17,19,17,19,19,19,19,19,16,19,18,10,19,19,19,19,14,16,16,17,19,19,14,10,19,17,19,7,16,16,19,18,8,16,19,15,19,19,19,19,10,17,19,19,7,4,19,19,19,16,19,1,6,19,19,19,6,16,19,15,16,19,12,19,19,19,9,19,19,10,19,19,19,14,16,19,18,14,18,5,19,11,19,3,7,19,16,18,13,15,19,19,19,5,19,8,19,19,19,19,15,10,19,9,10,19,4,19,17,18,17,18,17,19,19,19,19,7,5,17,19,19,19,1,18,19,19,18,15,19,16,19,17,18,19,19,19,19,19,19,19,19,10,1,19,19,3,19,19,19,16,17,19,19,19,16,19,19,19,19,19,19,19,15,15,19,19,18,16,9,10,18,10,10,12,19,8,8,7,19,19,10,19,19,5,19,16,16,19,19,19,19,18,19,17,19,19,19,19,6,19,17,16,18,0,19,9,19,19,1,17,19,8,16,19,2,19,0,18,16,19,19,19,19,19,19,19,17,19,16,19,19,18,16,12,19,19,15,10,10,16,19,10,7,8,19,19,19,12,10,19,19,19,10,15,19,10,19,16,19,18,9,19,8,9,10,15,8,13,19,1,16,8,19,6,19,19,6,19,19,19,16,19,18,19,19,19,3,19,10,10,19,19,19,17,19,19,19,19,19,10,10,7,14,19,16,19,19,17,19,18,10,16,18,16,10,8,19,15,18,8,19,10,14,19,2,19,3,19,13,13,14,7,18,19,17,19,19,19,11,19,19,13,19,19,7,19,19,19,15,5,19,17,19,18,19,16,19,0,1,19,19,19,19,19,1,4,10,12,10,19,0,18,18,19,18,18,16,2,11,13,18,19,19,5,16,19,18,17,19,19,19,6,13,17,19,19,19,14,18,16,5,19,19,18,13,16,1,16,10,19,8,17,19,16,19,19,16,10,4,10,19,19,19,18,16,19,19,5,9,12,16,6,18,19,19,10,5,16,19,19,19,5,16,17,19,9,9,17,6,9,14,13,19,15,10,14,18,19,16,9,19,19,19,7,16,19,16,18,9,19,10,19,5,18,19,19,19,2,6,19,4,3,19,19,7,19,15,19,8,18,15,18,19,10,10,19,1,19,16,19,19,19,19,10,6,3,19,19,10,16,19,10,10,19,19,9,16,19,19,10,1,14,10,19,5,19,19,19,1,16,19,19,2,18,9,6,16,18,19,18,18,18,19,18,0,19,19,19,16,16,7,19,19,9,14,10,19,19,19,18,14,1,19,3,19,19,2,18,18,11,2,19,16,19,12,19,19,19,7,19,19,19,19,19,8,12,2,18,19,18,15,19,19,19,19,18,5,19,10,6,10,19,19,7,6,19,16,19,19,16,19,16,16,19,19,15,6,10,13,18,19,11,16,18,10,0,14,12,16,13,19,5,0,16,1,16,19,19,3,19,1,10,16,16,10,19,17,19,19,19,19,19,19,6,5,15,14,16,19,18,19,19,16,5,18,18,19,19,10,15,19,19,19,19,17,19,16,15,19,19,19,19,19,3,19,10,10,11,19,7,3,1,19,15,10,19,18,19,19,18,4,19,16,10,19,18,1,18,19,19,16,15,19,13,7,19,19,19,6,11,16,7,11,19,19,19,19,19,19,18,19,19,19,19,16,19,19,16,19,19,7,19,17,2,19,7,16,16,9,16,19,16,15,19,10,14,19,19,19,6,19,16,19,19,16,19,17,19,6,7,19,18,0,19,12,16,19,10,17,19,19,19,16,19,17,17,19,19,19,19,16,3,17,17,19,16,18,10,17,19,19,19,19,18,19,19,9,19,19,16,19,19,19,6,19,15,12,19,10,15,19,19,18,19,18,19,16,1,10,19,18,6,19,19,17,19,10,0,18,16,16,19,19,9,8,11,19,19,16,7,15,19,19,19,18,10,19,16,19,19,19,5,19,18,15,19,19,10,5,19,19,16,19,19,3,7,16,2,19,10,19,19,13,7,19,16,19,19,12,10,19,8,10,19,10,9,19,19,14,19,19,16,19,16,19,12,19,19,17,19,1,10,19,19,10,14,16,19,19,9,18,19,10,19,19,15,10,14,18,9,17,0,0,18,19,19,19,10,19,19,19,16,19,18,19,2,19,19,15,9,19,19,19,19,19,18,6,19,16,19,11,14,18,19,19,16,15,19,19,7,16,19,14,19,1,18,19,6,0,11,16,16,14,19,2,16,16,19,19,18,16,19,6,19,19,10,17,2,15,12,19,19,19,16,1,19,19,1,16,18,19,19,19,8,19,19,19,11,7,8,19,6,19,19,10,19,16,16,17,16,19,19,16,19,19,19,19,18,19,19,0,10,19,16,16,19,8,18,16,19,18,19,1,19,19,19,19,19,19,19,2,14,19,4,18,17,19,19,19,19,19,19,18,19,16,11,5,19,18,5,10,19,19,18,19,17,18,19,9,9,14,19,18,19,3,16,19,13,19,18,19,19,17,19,19,18,19,19,19,19,19,10,19,14,6,19,19,16,16,19,19,19,19,2,19,15,8,10,19,5,19,19,15,19,5,16,19,16,16,10,18,11,8,16,19,11,16,7,9,10,15,19,19,19,19,18,19,3,19,19,2,19,16,19,3,6,8,17,15,16,5,6,10,10,1,15,13,19,19,19,2,18,18,7,1,18,19,19,19,16,19,10,10,8,17,19,19,19,19,18,16,6,5,14,16,16,19,13,18,19,0,19,18,19,19,19,19,5,19,18,19,5,19,19,16,19,19,19,16,19,14,1,10,9,19,19,19,19,19,15,19,19,1,2,19,19,10,7,5,11,19,15,8,19,19,5,19,10,19,19,16,6,1,19,10,19,19,19,14,8,19,7,19,19,19,15,19,16,10,19,19,19,10,19,15,7,19,19,3,19,19,19,3,16,19,7,19,19,16,14,17,19,19,17,2,19,10,16,7,6,5,16,18,19,19,18,19,16,2,19,18,10,19,17,19,17,19,7,16,18,19,19,14,18,19,16,19,19,19,16,16,10,10,19,6,16,19,19,19,19,18,19,18,16,18,19,16,8,19,19,17,18,19,9,19,19,19,19,19,19,19,19,8,16,19,19,4,19,19,19,19,19,6,19,18,16,19,6,19,19,16,14,8,19,19,19,19,8,19,19,19,19,10,19,5,19,19,19,6,16,10,10,17,19,17,10,19,19,10,5,14,19,11,19,15,10,19,18,13,8,19,9,10,19,19,19,6,19,19,19,18,19,19,19,19,15,16,8,19,19,12,19,1,19,19,18,10,19,18,18,19,18,3,10,1,17,16,19,16,18,19,16,19,19,19,19,18,19,16,13,7,18,6,18,19,19,19,9,17,19,16,7,16,18,3,9,19,10,19,16,18,18,14,16,19,9,19,2,1,19,19,18,19,18,10,19,17,19,5,19,19,18,18,5,16,19,17,19,15,19,19,19,19,19,19,19,19,19,16,16,10,5,19,19,19,9,5

    ]

)



label_item,item_label = label_item_map(label)    
numPerCluster = countNumPerCluster(label_item)

users = [2922, 937, 531, 2718, 1025, 237, 3012, 15, 3188, 1831, 1316, 3481, 415, 2877, 719, 2371, 2906, 893, 2934, 1758, 1278, 2575, 1615, 64, 3452, 2049, 3300, 2118, 3135, 2836, 1135, 1827, 325, 1448, 474, 1952, 2517, 3302, 766, 117, 1574, 336, 979, 2732, 1693, 2316, 3299, 2979, 1040, 910, 2553, 175, 737, 3375, 810, 3398, 1381, 2253, 2040, 1330, 2612, 3231, 3312, 1333, 2147, 2942, 3409, 1243, 774, 3184, 2065, 3269, 3037, 2135, 2981, 1516, 2531, 3057, 4, 2296, 2383, 2952, 897, 952, 2832, 262, 3207, 2098, 2775, 2570, 1380, 3139, 331, 1931, 1044, 859, 1475, 1134, 842, 725, 1580, 309, 2162, 438, 2567, 3208, 76, 1519, 1147, 2502, 56, 2692, 475, 885, 3200, 2792, 2194, 2412, 158, 2299, 686, 131, 315, 2786, 1083, 2848, 3022, 433, 546, 534, 3238, 1241, 2189, 1253, 2421, 1317, 2406, 1117, 2477, 3157, 3272, 2380, 1020, 1341, 1027, 101, 696, 3250, 1608, 949, 1924, 1813, 2021, 34, 2565, 1269, 623, 1318, 2133, 2984, 2428, 1930, 1115, 3495, 3258, 646, 165, 182, 543, 2278, 387, 1759, 712, 1834, 73, 515, 1992, 441, 337, 997, 3166, 527, 3203, 1015, 2589, 535, 2527, 3196, 1212, 1219, 2503, 2264, 1520, 566, 2032, 1572, 3096, 2047, 2568, 2627, 3419, 469, 2168, 3046, 3458, 2921, 710, 1403, 2824, 3159, 3122, 3306, 2947, 1052, 1401, 1733, 1339, 3263, 1089, 1836, 863, 2026, 247, 1999, 2715, 894, 1708, 2023, 2645, 1583, 59, 3336, 2933, 940, 2755, 2420, 2146, 1922, 332, 2184, 2711, 2198, 3267, 163, 1252, 1066, 1410, 2298, 923, 2871, 2215, 1794, 1363, 708, 1222, 1064, 2183, 10, 604, 777, 1175, 780, 2238, 265, 1350, 2171, 1329, 1665, 1691, 1787, 2924, 3024, 2748, 1681, 2727, 1639, 1272, 1291, 47, 329, 697, 1842, 2293, 1426, 961, 3443, 929, 2905, 2438, 3459, 927, 2324, 989, 814, 836, 1632, 2540, 1981, 16, 2128, 1377, 1885, 443, 2688, 1313, 1224, 211, 576, 2003, 792, 17, 1983, 549, 2491, 1640, 1026, 2456, 915, 1211, 124, 1290, 2731, 397, 3510, 3204, 2311, 1846, 2596, 1578, 647, 1859, 1518, 2584, 467, 2625, 503, 2180, 718, 2746, 2015, 2093, 1271, 1650, 1054, 1891, 1080, 3315, 2678, 1828, 652, 1084, 941, 1451, 3340, 214, 1112, 2272, 224, 2880, 954, 273, 212, 2446, 3460, 1294, 2100, 3107, 1778, 753, 3192, 2009, 2011, 502, 2354, 788, 1998, 2573, 3538, 2031, 2614, 579, 2360, 653, 3153, 2405, 1902, 1180, 116, 1436, 1331, 3324, 3559, 2158, 3051, 3053, 2057, 1959, 3352, 3234, 2805, 22, 1216, 389, 1822, 2861, 106, 1190, 1327, 2154, 42, 345, 2615, 3108, 176, 2379, 2222, 2230, 3514, 3130, 2966, 1903, 1984, 778, 2042, 1856, 148, 598, 1442, 1429, 827, 2033, 2056, 2328, 1536, 288, 1576, 2588, 3449, 142, 2929, 699, 3480, 3520, 2563, 2543, 2683, 2207, 292, 613, 890, 202, 648, 2580, 3519, 138, 2460, 3350, 2699, 856, 1092, 2261, 3, 518, 2887, 1550, 1752, 1173, 1647, 1986, 3417, 2348, 702, 3091, 1723, 2985, 1276, 1014, 3124, 1687, 373, 1043, 769, 2638, 2419, 2996, 743, 465, 217, 1110, 956, 839, 2352, 2007, 820, 994, 2851, 2855, 1198, 991, 2598]

threshods = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]

TopN =[20]   
header = [x for x in range(0,n_items)]


if __name__ == '__main__':    
    positive = getPositivelinks(df)
    #t2 = time.time()
    #print "positive",t2-t1
    weightMatrix = genWeightMatrix(positive)
    #t3 = time.time()
    #print "weightMatrix",t3-t2
    itemHaveEdges = itemHaveEdges(weightMatrix)
    #t4 = time.time()
    #print "itemHaveEdges",t4-t3
    shanno_entropy = caculateEntropy(weightMatrix,itemHaveEdges)
    #t5 = time.time()
    #print "shanno_entropy",t5-t4
    
    for user in users[:500]:
        print users.index(user)
        theUserPositiveItems = sorted(positive.get(user))
        subGraph =extractSubgraph(weightMatrix,theUserPositiveItems) 
        edges = getSubGraphEdges(subGraph,theUserPositiveItems)
        for topn in TopN:
           paraCreate(topn,user )
    print "finished!!!"
