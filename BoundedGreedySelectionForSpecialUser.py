# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd
import random
import time

def GetMostSimilaryold(ratingdf,user,topk):
    return dict(ratingdf.loc[user].sort_values(ascending=False).head(topk)).keys()

def GetMostSimilary(itemsimilarity,target,topk):    
    return dict(pd.DataFrame(itemsimilarity).loc[target].sort_values(ascending=False).head(n=topk)).keys()

def GetSimilary(similary,target,item):
    return similary[target][item]

def Diversity(similary,result,item,target):
    diversity = 0
    if len(result)==0:
        diversity = 1
    else:
        sum = 0
        length = len(result)
        for item in result:
            sum +=  (1-GetSimilary(similary,target,item))
        diversity = sum /float(length)
    return diversity


def Quality(similary,target,item,result):
    return GetSimilary(similary,target,item) * Diversity(similary,result,item,target)

def QualityAlpha(similary,target,item,result,alpha):   
    return (1-alpha)*GetSimilary(similary,target,item) + alpha * Diversity(similary,result,item,target)
def BoundedGreedySelection(target,similary,k,bound,alpha):
    mostSimilar = GetMostSimilary(similary,target,bound)
    #print len(mostSimilar)
    result = []
    while(len(result)<k):
        remaining = list(set(mostSimilar) - set(result))
        maxQuality =-9999.00
        itemmaxQuality = None
        for item in remaining:
            #if Quality(similary,target,item,result) > maxQuality:
            temp = QualityAlpha(similary,target,item,result,alpha)
            
            if temp > maxQuality:
                
                maxQuality = Quality
                itemmaxQuality = item
        result.append(itemmaxQuality)
    return result

n_users = 6040
n_items = 3706
header = [x for x in range(0,n_items)]
df = pd.read_csv(r'D:\recommendation\new\MovielensALS.txt', sep=',', names=header,index_col=False)

from sklearn.metrics.pairwise import pairwise_distances
#user_similarity = pairwise_distances(train_data_matrix, metric='cosine')
item_similarity = 1-pairwise_distances(df.as_matrix().T, metric='cosine')
Bound = [100,200,400]

users = [1760, 3655, 3051, 5489, 790, 380, 1477, 957, 569, 4096, 5810, 5416, 2624, 4397, 306, 1604, 5093, 2886, 2775, 2452, 3585, 5226, 5584, 2992, 1063, 971, 5852, 764, 5099, 4955, 2997, 1381, 4618, 2920, 3789, 438, 3321, 2213, 5573, 5090, 460, 4896, 5410, 1904, 1190, 5082, 1518, 4562, 3843, 5475, 3934, 2323, 1482, 541, 2406, 4496, 5208, 5470, 1728, 2911, 2412, 5630, 172, 1705, 579, 1873, 2418, 2802, 1009, 4977, 2311, 2969, 4550, 4028, 176, 178, 3270, 2031, 1798, 2650, 1448, 2990, 1533, 2348, 1826, 4250, 2098, 2687, 2823, 4347, 4754, 5411, 2410, 4809, 672, 1959, 1082, 1385, 5091, 5117, 485, 5467, 1021, 5609, 2696, 5547, 4488, 2605, 5674, 2931, 1040, 3473, 143, 2552, 3816, 5040, 5628, 3871, 2967, 1801, 2697, 1079, 2073, 3117, 1902, 4663, 4020, 1900, 3893, 84, 2956, 4571, 3375, 1255, 397, 2303, 399, 34, 4713, 3675, 3889, 1206, 981, 1490, 3663, 4819, 1882, 2784, 5350, 2062, 4224, 1289, 3138, 2858, 5752, 232, 4872, 528, 4318, 3280, 6039, 1031, 1237, 1151, 4884, 1405, 4356, 3368, 1118, 2551, 5578, 5595, 1799, 1956, 2255, 187, 2962, 829, 407, 4830, 4674, 1618, 5782, 3173, 5233, 3115, 1109, 1243, 2984, 2936, 5789, 3532, 2773, 1950, 1093, 3581, 2480, 3657, 3815, 2869, 1183, 3474, 1597, 1678, 1295, 3475, 1596, 5455, 3063, 916, 3634, 1981, 3530, 3813, 4316, 2455, 920, 2085, 478, 685, 4372, 5650, 4409, 4340, 2317, 4023, 173, 1359, 5818, 577, 3937, 3351, 4283, 1606, 4957, 5548, 61, 4820, 2995, 3717, 1432, 1706, 1926, 124, 734, 1977, 224, 5246, 3004, 3492, 5390, 1619, 1714, 2296, 5878, 2357, 4874, 2504, 1643, 214, 3096, 310, 2492, 1384, 3557, 4632, 987, 303, 5074, 3182, 1911, 4826, 4449, 5136, 1247, 1052, 1469, 1191, 2562, 2079, 286, 2688, 510, 5206, 1513, 2815, 2508, 6027, 788, 1639, 5056, 1766, 793, 5955, 3218, 4947, 524, 3091, 5543, 980, 1883, 4786, 3193, 4498, 1837, 3201, 4166, 1796, 137, 3293, 1051, 72, 5749, 2482, 3647, 3073, 5135, 1874, 1365, 5751, 4986, 269, 4932, 5932, 1500, 3018, 4075, 2016, 1579, 2925, 4668, 1781, 3701, 1881, 4039, 3024, 5744, 2242, 4495, 1047, 1398, 1098, 5568, 2736, 4230, 1435, 1048, 1542, 4862, 3358, 4025, 3568, 318, 5970, 1929, 5582, 4064, 4963, 1955, 5454, 947, 6030, 4322, 719, 2035, 5911, 1892, 3502, 5300, 4708, 2469, 2380, 5263, 4564, 5179, 2290, 5333, 476, 4934, 2233, 5051, 5453, 3308, 5062, 2964, 3769, 1417, 5229, 2565, 5866, 5393, 5652, 3886, 2581, 5895, 1725, 281, 4069, 2783, 3066, 5654, 2111, 4720, 4699, 3940, 3281, 80, 5356, 3551, 3500, 5675, 4781, 4976, 1125, 360, 1985, 1709, 3844, 5242, 258, 5850, 3013, 1947, 4656, 5754, 1056, 962, 2799, 1035, 4756, 5264, 1503, 518, 5164, 3317, 6015, 488, 2009, 1772, 2092, 4905, 4047, 3704, 2822, 3477, 4079, 2702, 5571, 591, 529, 5022, 2295, 5023, 5385, 4689, 1626, 1101, 5644, 1124, 5601, 4477, 3034, 4006, 711, 561, 3665, 81, 4763, 251, 474, 3780, 4445, 2444, 4643, 3055, 2701, 3350, 4148, 2852, 1390, 1832, 2774, 1434, 2044, 1689, 5567, 1896, 654, 2915, 4220, 94, 162, 2302, 5155, 4914, 5660, 656, 1687, 3419, 4333]
targets = [32, 1788, 2568, 1715, 1849, 123, 2645, 3212, 767, 1360, 2337, 180, 2366, 2797, 2537, 863, 1180, 288, 72, 1152, 1156, 828, 1596, 3413, 128, 3325, 387, 39, 2101, 3081, 1003, 2685, 1398, 1119, 2789, 1060, 3010, 264, 2202, 2265, 1257, 2108, 1320, 3635, 155, 3222, 1743, 1408, 2528, 3379, 739, 205, 93, 3573, 2826, 131, 3051, 1706, 3226, 2390, 524, 2048, 984, 3378, 1842, 910, 1488, 877, 792, 967, 2572, 1286, 2817, 1579, 282, 782, 3483, 3135, 1173, 3294, 345, 2607, 3239, 2133, 655, 1323, 260, 1407, 2217, 953, 2520, 1278, 1454, 366, 541, 234, 766, 191, 3381, 709, 1630, 2933, 1073, 2292, 2555, 3249, 184, 3681, 889, 482, 3511, 2630, 3065, 2149, 2438, 2764, 602, 3086, 246, 837, 1332, 182, 2332, 1809, 3, 110, 648, 261, 206, 2400, 3109, 66, 2904, 51, 995, 1033, 2606, 693, 882, 2080, 2323, 1660, 3107, 460, 1483, 61, 2813, 2737, 1112, 525, 3240, 3321, 3312, 3404, 3581, 1455, 2473, 564, 1134, 3346, 2779, 84, 2546, 3349, 538, 304, 3579, 946, 2974, 1291, 1901, 3157, 3523, 1767, 754, 54, 1353, 2623, 92, 2603, 779, 2218, 2369, 1385, 77, 2358, 1668, 3672, 3208, 3500, 1997, 2414, 3098, 2444, 287, 1432, 3641, 1820, 2857, 757, 1275, 3267, 424, 673, 545, 1720, 1429, 1675, 3244, 1669, 1048, 575, 732, 906, 412, 518, 379, 269, 1463, 2729, 1950, 2220, 1731, 2965, 37, 2291, 1450, 3285, 2930, 96, 651, 2915, 2755, 2129, 1131, 1335, 694, 2272, 1230, 3335, 2059, 2576, 2145, 783, 1288, 2601, 2230, 15, 3169, 275, 82, 2339, 1255, 3583, 3339, 3633, 2143, 3176, 3417, 1002, 1805, 2198, 453, 411, 2608, 2401, 912, 2114, 543, 1792, 3465, 626, 2519, 3400, 1416, 1893, 83, 514, 2257, 1502, 3000, 1027, 172, 1737, 3316, 1744, 3481, 2099, 1894, 238, 1427, 1221, 2918, 1110, 3214, 1109, 3014, 2903, 1242, 2485, 1379, 1998, 2019, 488, 2447, 1662, 46, 2791, 2251, 2714, 2025, 654, 2878, 247, 2154, 849, 2380, 2430, 1900, 3493, 936, 3678, 1613, 135, 2768, 2542, 1624, 2457, 3622, 3494, 2670, 2908, 2119, 2811, 931, 3248, 3334, 892, 1017, 3551, 2404, 764, 2707, 1786, 2055, 13, 3129, 1607, 94, 672, 1270, 2003, 3357, 1163, 5, 3134, 3548, 3343, 582, 1551, 909, 1991, 1889, 2039, 1939, 400, 2285, 1789, 2991, 2911, 2503, 2413, 1487, 3375, 1532, 2328, 1557, 1577, 1879, 3563, 948, 2128, 2091, 2331, 3259, 641, 3614, 1776, 1941, 3456, 2805, 480, 3683, 3618, 1308, 1150, 3365, 303, 3037, 710, 420, 170, 702, 1333, 1567, 1040, 3550, 95, 1132, 3311, 937, 848, 2341, 1860, 3200, 2472, 1952, 2772, 1035, 1552, 3659, 383, 2040, 1839, 1376, 2288, 2898, 1832, 292, 1634, 7, 266, 826, 1995, 3689, 117, 1000, 278, 2259, 2750, 1529, 87, 1636, 2644, 1687, 2340, 175, 3299, 2864, 2677, 1133, 2246, 861, 203, 3429, 2185, 2324, 2434, 2726, 1069, 3004, 2921, 331, 79, 300, 560, 1602, 2514, 3159, 8, 70, 2071, 2996, 1884, 1413, 1305, 200, 1875, 3568, 3057, 1258, 1846, 323, 1912, 2167, 1010, 887, 802, 2110, 2207, 614, 2851, 2188, 3133, 2247, 2666, 2945, 2357, 2971, 1830]
#random.sample([x for x in range(0,3706)],500)

def BGS(TopN):
    #print ("bound=",bound,"topn=",topn)
    for bound in Bound:
        boundFile = open(r"D:\BGS\Bound["+str(bound)+"]alpha["+str(TopN)+"]ForSpecailUserALS.txt",'a')
        timeFile = open(r"D:\BGS\[time]Bound["+str(bound)+"]alpha["+str(TopN)+"]ForSpecailUserALS.txt",'a')
        for user in range(0,len(users)):
            t1= time.time()
            result = BoundedGreedySelection(targets[user],item_similarity,TopN,bound,0.85)
            t2= time.time()
            timeFile.write(str(t2-t1)+"\n")
            boundFile.write(str(result)+","+"\n")
        timeFile.close()    
        boundFile.close()
        print("well done!!!")

from multiprocessing import Pool
if __name__ == '__main__':
    
    TopN = [5,10,20,30,40,50,60,70,80,90,100]
    #alphas=[0,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1]    
    pool = Pool(5)
    pool.map(BGS,TopN)
    pool.close()
    pool.join()
    print "Everything is well done!!! hahaha ~~~~~~"
